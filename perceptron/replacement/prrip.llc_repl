#include "cache.h"
#include "prrip.h"

#define maxRRPV 3
uint32_t rrpv[LLC_SET][LLC_WAY];

#define SAMPLER_SIZE 64
uint32_t SAMPLER_SET[SAMPLER_SIZE];

PRRIP pct_module;

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    for (int i=0; i<LLC_SET; i++) {
        for (int j=0; j<LLC_WAY; j++) {
            rrpv[i][j] = maxRRPV;
        }
    }
    cout << "Per-line RRPV Initialized" << endl;

    pct_module.init_policy(LLC_SET, LLC_WAY, SAMPLER_SIZE, LLC_WAY);
    cout << "PRRIP State Initialized" << endl;

    // randomly selected sampler sets
    srand(time(NULL));
    unsigned long rand_seed = 1;
    unsigned long max_rand = 1048576;
    uint32_t my_set = LLC_SET;
    int do_again = 0;
    for (int i=0; i<SAMPLER_SIZE; i++) {
        do {
            do_again = 0;
            rand_seed = rand_seed * 1103515245 + 12345;
            SAMPLER_SET[i] = ((unsigned) ((rand_seed/65536) % max_rand)) % my_set;
            printf("Assign SAMPLER_SET[%d]: %u  LLC: %u\n", i, SAMPLER_SET[i], my_set);
            for (int j=0; j<i; j++) {
                if (SAMPLER_SET[i] == SAMPLER_SET[j]) {
                    do_again = 1;
                    break;
                }
            }
        } while (do_again);
        printf("SAMPLER_SET[%d]: %d\n", i, SAMPLER_SET[i]);
    }
}

// check if this set is sampled
uint32_t is_it_sampled(uint32_t set) {
    for (int i=0; i<SAMPLER_SIZE; i++) {
        if (SAMPLER_SET[i] == set)
            return i;
    }
    return SAMPLER_SIZE;
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // look for the maxRRPV line
    while (1)
    {            
        for (int i=0; i<LLC_WAY; i++)
            if (rrpv[set][i] == maxRRPV)
                return i;
        
        for (int i=0; i<LLC_WAY; i++)
            rrpv[set][i]++;
        
    }

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{   
    // handle writeback access
    if (type == WRITEBACK) {
        if (hit) {
            return;
        }
        else {
            if (block[set][way].valid) {                                        
                uint32_t sampled_set_id = is_it_sampled(set);
                if (sampled_set_id < SAMPLER_SIZE)
                    pct_module.update(victim_addr>>LOG2_BLOCK_SIZE, sampled_set_id, way, -1);   // update upon writeback miss (eviction)    
                
                rrpv[set][way] = pct_module.predict(full_addr>>LOG2_BLOCK_SIZE);
                
                if (rrpv[set][way] < maxRRPV)                                                   // penalize WB replacements by one
                    rrpv[set][way]++;
            }
            else
                rrpv[set][way] = maxRRPV-1;
            return;
        }
    }

    if (hit) {
        rrpv[set][way] = 0;
        uint32_t sampled_set_id = is_it_sampled(set);
        if (sampled_set_id < SAMPLER_SIZE)
            pct_module.update(full_addr>>LOG2_BLOCK_SIZE, sampled_set_id, way, 1);               // update upon hit
    }
    else {      
        if (block[set][way].valid) {                                            
            uint32_t sampled_set_id = is_it_sampled(set);
            if (sampled_set_id < SAMPLER_SIZE)
                pct_module.update(victim_addr>>LOG2_BLOCK_SIZE, sampled_set_id, way, -1);       // update upon eviction
            
            rrpv[set][way] = pct_module.predict(full_addr>>LOG2_BLOCK_SIZE);
        }
        else
            rrpv[set][way] = maxRRPV-1;
    }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{
    cout << "==============================" << endl;
    cout << "Perceptron RRIP Stats:" << endl;
    cout << "   Num Updates:          " << pct_module.num_update << endl;
    cout << "   Num Primary Trains:   " << pct_module.num_primary_train << endl;
    cout << "   Num Secondary Trains: " << pct_module.num_secondary_train << endl;
    cout << "==============================" << endl;
    pct_module.dump_weights();
}
